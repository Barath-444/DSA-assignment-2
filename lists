#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100
#define NAME_LENGTH 50

void createList(char students[][NAME_LENGTH], int *count) {
    printf("Enter the number of students (max %d): ", MAX_STUDENTS);
    scanf("%d", count);
    if (*count > MAX_STUDENTS) {
        printf("Exceeded maximum number of students. Setting to %d.\n", MAX_STUDENTS);
        *count = MAX_STUDENTS;
    }
    for (int i = 0; i < *count; i++) {
        printf("Enter student name %d: ", i + 1);
        scanf("%s", students[i]);
    }
}

void insertStudent(char students[][NAME_LENGTH], int *count) {
    if (*count >= MAX_STUDENTS) {
        printf("Cannot insert more students. List is full.\n");
        return;
    }
    char name[NAME_LENGTH];
    int position;
    printf("Enter the student's name to insert: ");
    scanf("%s", name);
    printf("Enter the position (0-based index) to insert the student: ");
    scanf("%d", &position);
    if (position < 0 || position > *count) {
        printf("Invalid position.\n");
        return;
    }
    for (int i = *count; i > position; i--) {
        strcpy(students[i], students[i - 1]);
    }
    strcpy(students[position], name);
    (*count)++;
}

void deleteStudent(char students[][NAME_LENGTH], int *count) {
    char choice;
    printf("Delete by name or position? (n/p): ");
    scanf(" %c", &choice);
    if (choice == 'n') {
        char name[NAME_LENGTH];
        printf("Enter the student's name to delete: ");
        scanf("%s", name);
        for (int i = 0; i < *count; i++) {
            if (strcmp(students[i], name) == 0) {
                for (int j = i; j < *count - 1; j++) {
                    strcpy(students[j], students[j + 1]);
                }
                (*count)--;
                printf("Deleted %s from the list.\n", name);
                return;
            }
        }
        printf("Student %s not found.\n", name);
    } else if (choice == 'p') {
        int position;
        printf("Enter the position (0-based index) to delete the student: ");
        scanf("%d", &position);
        if (position < 0 || position >= *count) {
            printf("Invalid position.\n");
            return;
        }
        for (int i = position; i < *count - 1; i++) {
            strcpy(students[i], students[i + 1]);
        }
        (*count)--;
        printf("Deleted student at position %d.\n", position);
    } else {
        printf("Invalid choice.\n");
    }
}

void displayStudents(char students[][NAME_LENGTH], int count) {
    if (count == 0) {
        printf("No students in the list.\n");
        return;
    }
    printf("Student list: [");
    for (int i = 0; i < count; i++) {
        printf("%s", students[i]);
        if (i < count - 1) printf(", ");
    }
    printf("]\n");
}

void searchStudent(char students[][NAME_LENGTH], int count) {
    char name[NAME_LENGTH];
    printf("Enter the student's name to search: ");
    scanf("%s", name);
    for (int i = 0; i < count; i++) {
        if (strcmp(students[i], name) == 0) {
            printf("%s found at position %d\n", name, i);
            return;
        }
    }
    printf("Student %s not found.\n", name);
}

int main() {
    char students[MAX_STUDENTS][NAME_LENGTH];
    int count = 0;
    int choice;

    while (1) {
        printf("\n1. Create the list of students\n");
        printf("2. Insert a new student\n");
        printf("3. Delete a student\n");
        printf("4. Display student list\n");
        printf("5. Search for a student\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                createList(students, &count);
                break;
            case 2:
                insertStudent(students, &count);
                break;
            case 3:
                deleteStudent(students, &count);
                break;
            case 4:
                displayStudents(students, count);
                break;
            case 5:
                searchStudent(students, count);
                break;
            case 6:
                printf("Exiting the program...\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
