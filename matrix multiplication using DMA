#include <stdio.h>
#include <stdlib.h>

void multiplyMatrices(int **a, int **b, int **result, int rowsA, int colsA, int colsB) {
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            result[i][j] = 0; // Initialize the result cell
            for (int k = 0; k < colsA; k++) {
                result[i][j] += a[i][k] * b[k][j]; 
            }
        }
    }
}

void freeMatrix(int **matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

int main() {
    int rowsA, colsA, rowsB, colsB;
    printf("Enter rows and columns for first matrix (A): ");
    scanf("%d %d", &rowsA, &colsA);
    
    printf("Enter rows and columns for second matrix (B): ");
    scanf("%d %d", &rowsB, &colsB);

    
    if (colsA != rowsB) {
        printf("Matrix multiplication is not possible!\n");
        return 1;
    }

    
    int **a = (int **)malloc(rowsA * sizeof(int *));
    int **b = (int **)malloc(rowsB * sizeof(int *));
    int **result = (int **)malloc(rowsA * sizeof(int *));
    
    for (int i = 0; i < rowsA; i++) {
        a[i] = (int *)malloc(colsA * sizeof(int));
    }
    for (int i = 0; i < rowsB; i++) {
        b[i] = (int *)malloc(colsB * sizeof(int));
    }
    for (int i = 0; i < rowsA; i++) {
        result[i] = (int *)malloc(colsB * sizeof(int));
    }
    printf("Enter elements of matrix A:\n");
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsA; j++) {
            scanf("%d", &a[i][j]);
        }
    }
    printf("Enter elements of matrix B:\n");
    for (int i = 0; i < rowsB; i++) {
        for (int j = 0; j < colsB; j++) {
            scanf("%d", &b[i][j]);
        }
    }
    multiplyMatrices(a, b, result, rowsA, colsA, colsB);
    printf("Resultant matrix (C):\n");
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
    freeMatrix(a, rowsA);
    freeMatrix(b, rowsB);
    freeMatrix(result, rowsA);

    return 0;
}
